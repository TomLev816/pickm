// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Vote {
    id Int @id @default(autoincrement())

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    Game   Game? @relation(fields: [gameId], references: [id])
    gameId Int?

    Team   Team? @relation(fields: [teamId], references: [id])
    teamId Int?
}

model Game {
    id      Int       @id
    season  Int       @default(2022)
    weekNum Int
    date    DateTime?
    isFinal Boolean   @default(false)

    home         Team?    @relation("homeGames", fields: [homeId], references: [id])
    homeId       Int
    homeScore    Int?
    homeIsWinner Boolean?

    away         Team?    @relation("awayGames", fields: [awayId], references: [id])
    awayId       Int
    awayScore    Int?
    awayIsWinner Boolean?

    votes Vote[]

    @@index([homeId])
    @@index([awayId])
}

model Team {
    id           Int     @id
    city         String
    name         String
    abbreviation String
    displayName  String
    logo         String?

    votes     Vote[]
    homeGames Game[] @relation("homeGames")
    awayGames Game[] @relation("awayGames")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    votes         Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
